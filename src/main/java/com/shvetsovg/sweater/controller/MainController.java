package com.shvetsovg.sweater.controller;

import com.shvetsovg.sweater.domain.Message;
import com.shvetsovg.sweater.domain.User;
import com.shvetsovg.sweater.repos.MessageRepo;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import java.io.File;
import java.io.IOException;
import java.util.Map;
import java.util.UUID;
import java.util.stream.Collector;
import java.util.stream.Collectors;

@Controller
public class MainController {

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private MessageRepo messageRepo;

    @Value("${upload.path}")
    private String uploadPath;

    @GetMapping("/")
    public String greeting(Map<String, Object> model) {
        return "greeting";
    }

    @GetMapping("/main")
    public String main(@RequestParam(required = false, defaultValue = "") String filter, Model model){
        Iterable<Message> messages;

        if(filter != null && !filter.isEmpty()) {
            messages = messageRepo.findByTag(filter);
        }
        else {
            messages = messageRepo.findAll();
        }

        model.addAttribute("messages", messages);
        model.addAttribute("filter", filter);
        return "main";
    }

    @PostMapping("add")
    public String add(
            @AuthenticationPrincipal User user,
            @Valid Message message,
            BindingResult bindingResult,//должен идти всегда перед Model, относится к валидации. Список аргументов и сообщений ошибок валидации
            Model model,
            @RequestParam("file") MultipartFile file
    ) throws IOException {
        //создаем сообщение
        message.setAuthor(user);

        if(bindingResult.hasErrors()) {
            Map<String, String> errorsMap = ControlleUtils.getErrors(bindingResult);//перезаписываем ошибки валидации в мапу через Stream.api
            model.mergeAttributes(errorsMap);
            model.addAttribute("message", message);
        } else {
            if (file != null && !file.getOriginalFilename().isEmpty()) {
                File uploadDir = new File(uploadPath);
                if (!uploadDir.exists()) {
                    uploadDir.mkdir();
                }

                String uuidFile = UUID.randomUUID().toString();//рандомная генерация для уникального названия файла
                String resultFilename = uuidFile + "." + file.getOriginalFilename();

                file.transferTo(new File(uploadPath + "/" + resultFilename));
                message.setFilename(resultFilename);
            }

            model.addAttribute("message", null); //опустошаем сообщения, чтобы после добавления сообщения, форма была закрыта (см. шаблон main.ftl)

            //сохраняем в базу
            messageRepo.save(message);
        }
        //берем из репозитория
        Iterable<Message> messages = messageRepo.findAll();
        //положили в модель
        model.addAttribute("messages", messages);
        model.addAttribute("filter", "");
        //выводим пользователю
        return "main";
    }
}
